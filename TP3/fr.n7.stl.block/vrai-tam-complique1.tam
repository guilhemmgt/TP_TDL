;int i = 1;
PUSH 1
LOADL 1
STORE (1) 0[SB]
;< int, int> p = < 3, 4>;
PUSH 2
LOADL 3
LOADL 4
STORE (2) 1[SB]
;int k = (fst p);
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@3ac42916
;(fst p)
LOAD (2) 1[SB]
POP (0) 1
STORE (1) 3[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@47d384ee
;(i < 5)
;if else
LOAD (1) 0[SB]
LOADL 5
SUBR ILss
JUMPIF (0) else1
;int j = 5;
PUSH 1
LOADL 5
STORE (1) 4[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@22a71081
;(i * (sndp))
; j  = (i * (sndp));
LOAD (1) 0[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@3930015a
;(sndp)
LOAD (2) 1[SB]
POP (1) 1
SUBR IMul
LOADA 4[SB]
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@629f0666
;(j + 1)
; i  = (j + 1);
LOAD (1) 4[SB]
LOADL 1
SUBR IAdd
LOADA 0[SB]
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@1bc6a36e
;(k < 10)
;while
while2
LOAD (1) 3[SB]
LOADL 10
SUBR ILss
JUMPIF (0) endwhile2
;int p = 1;
PUSH 1
LOADL 1
STORE (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@1ff8b8f
;(k + p)
; k  = (k + p);
LOAD (1) 3[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@387c703b
LOAD (1) 5[SB]
SUBR IAdd
LOADA 3[SB]
STOREI (1)
JUMP while2
endwhile2
JUMP endif1
else1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@224aed64
;(i + j)
;((i + j) > 10)
;if
LOAD (1) 0[SB]
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@c39f790
LOADL 2
SUBR IAdd
LOADL 10
SUBR IGtr
JUMPIF (0) endif3
; i  = 0;
LOADL 0
LOADA 0[SB]
STOREI (1)
endif3
endif1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@71e7a66b
;(i == 5)
;((i == 5) && (j == 2))
;(((i == 5) && (j == 2)) && ((fst p) == 3))
;((((i == 5) && (j == 2)) && ((fst p) == 3)) && ((sndp) == 4))
;(((((i == 5) && (j == 2)) && ((fst p) == 3)) && ((sndp) == 4)) && (k == 10))
;print (((((i == 5) && (j == 2)) && ((fst p) == 3)) && ((sndp) == 4)) && (k == 10));
LOAD (1) 0[SB]
LOADL 5
SUBR IEq
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@2ac1fdc4
;(j == 2)
LOADL 2
LOADL 2
SUBR IEq
SUBR BAnd
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@5f150435
;(fst p)
;((fst p) == 3)
LOAD (2) 1[SB]
POP (0) 1
LOADL 3
SUBR IEq
SUBR BAnd
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@1c53fd30
;(sndp)
;((sndp) == 4)
LOAD (2) 1[SB]
POP (1) 1
LOADL 4
SUBR IEq
SUBR BAnd
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@50cbc42f
;(k == 10)
LOAD (1) 3[SB]
LOADL 10
SUBR IEq
SUBR BAnd
SUBR IOut
HALT

