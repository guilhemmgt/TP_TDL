;(PInt []) tab = new PInt[ t ];
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@3d646c37
;new PInt[ t ]
LOADL 11
LOADL 1
SUBR IMul
SUBR MAlloc
STORE (1) 0[SB]
;boolean pair = true;
PUSH 1
LOADL 1
STORE (1) 1[SB]
;int a = 0;
PUSH 1
LOADL 0
STORE (1) 2[SB]
;int b = 1;
PUSH 1
LOADL 1
STORE (1) 3[SB]
;int i = 0;
PUSH 1
LOADL 0
STORE (1) 4[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@41cf53f9
;(i < t)
;while
while15
LOAD (1) 4[SB]
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@5a10411
LOADL 11
SUBR ILss
JUMPIF (0) endwhile15
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@2ef1e4fa
;(pair == true)
; tab [ i ] = ((pair == true) ? fr.n7.stl.block.ast.expression.accessible.AddressAccess@7a07c5b4 : fr.n7.stl.block.ast.expression.accessible.AddressAccess@26a1ab54);
LOAD (1) 1[SB]
LOADL 1
SUBR IEq
JUMPIF (0) condexElse16
LOADA 2[SB]
JUMP condexEnd16
condexElse16
LOADA 3[SB]
condexEnd16
;ArrayAssignement:  tab [ i ]
LOADA 0[SB]
LOADI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@306a30c7
LOAD (1) 4[SB]
LOADL 1
SUBR IMul
SUBR IAdd
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@b81eda8
;(pair == false)
; pair  = (pair == false);
LOAD (1) 1[SB]
LOADL 0
SUBR IEq
LOADA 1[SB]
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@68de145
;(i + 1)
; i  = (i + 1);
LOAD (1) 4[SB]
LOADL 1
SUBR IAdd
LOADA 4[SB]
STOREI (1)
POP (0) 0
JUMP while15
endwhile15
;print "une suite de 0 et de 1: ";
LOADL 34
LOADL 32
LOADL 58
LOADL 49
LOADL 32
LOADL 101
LOADL 100
LOADL 32
LOADL 116
LOADL 101
LOADL 32
LOADL 48
LOADL 32
LOADL 101
LOADL 100
LOADL 32
LOADL 101
LOADL 116
LOADL 105
LOADL 117
LOADL 115
LOADL 32
LOADL 101
LOADL 110
LOADL 117
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
;int j = 0;
PUSH 1
LOADL 0
STORE (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@27fa135a
;(j < t)
;while
while17
LOAD (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@46f7f36a
LOADL 11
SUBR ILss
JUMPIF (0) endwhile17
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@421faab1
;ArrayAccess: tab[ j ]
;print (*tab[ j ]);
LOAD (1) 0[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@2b71fc7e
LOAD (1) 5[SB]
LOADL 1
SUBR IMul
SUBR IAdd
LOADI (1)
LOADI (1)
SUBR IOut
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@5ce65a89
;(j + 1)
; j  = (j + 1);
LOAD (1) 5[SB]
LOADL 1
SUBR IAdd
LOADA 5[SB]
STOREI (1)
POP (0) 0
JUMP while17
endwhile17
POP (0) 6
HALT

